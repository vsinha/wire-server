# vim: ai:ts=2:sw=2:et!

functions:                      #reusable boolean functions
  - isLoggedIn():               auth !== null
  - createOnly():               next.exists() && !prev.exists()
  - deleteOnly():               prev.exists() && !next.exists()
  - createOrDelete():           createOnly() || deleteOnly()
  - isUser(user_id):           user_id === root['user_mappings/'+auth.provider+'/'+auth.uid+'/user_id']
  - isFriend(user_id):         root['users/'+user_id+'/friends/'+( root['user_mappings/'+auth.provider+'/'+auth.uid+'/user_id'].val() )].exists()
  - hasUser_id():              root['user_mappings/'+auth.provider+'/'+auth.uid+'/user_id'].exists()
  - postedByFriend(status_id):  isFriend( root['statuses/'+status_id+'/user_id'].val() )
  - postedByUser(status_id):    isUser( root['statuses/'+status_id+'/user_id'].val() )
  - checkReply(status_id):      (status_id == null) || postedByFriend(status_id) || postedByUser(status_id)
  - isReasonableString(data):   (data.isString() && data.val().length < 1000)

schema:
  # DEFINITIONS USED FOR REPEATED DATA SCHEMAS
  definitions:
    location:
      type: object
      properties:
        lat:
          type: number
        long:
          type: number
      required: [lat, long]
      additionalProperties: false

  # BEGIN APP SCHEMA
  type: object
  properties:
    #users object
    users:
      type: object
      $user_id:
        type: object
        properties:
          public_profile:
            type: object
            properties:
              username:
                type: string
          facebook_auth:
            type: string
          installation:
            type: object
            properties: 
              device_type:
                type: string
              device_token:
                type: string
          location: {$ref: "#/definitions/location"}
          friends:
            ~$user_id:
              type: boolean
          notifications:
            ~$notification_id:
              type: boolean
          statuses:
            ~$status_id:
              type: boolean
          groups:
            ~$group_chat_id:
              type: boolean

    #usernames index for fast username and userid lookup
    usernames:
      type: object
      $username:
        # value is the user_id
        type: string
        # Only Index Users Who Have accounts and
        # Only Index Own Username
        constraint: root['users/'+next.value].exists() &&
                    isUser(next.value)

    #user mapping used to decouple user accounts from login method
    user_mappings:
      type: object
      properties:
        facebook:
          $facebook_auth_id:
            type: object
            properties:
              access_token:
                type: string
              cached_user_profile:
                type: object
              display_name:
                type: string
              email:
                type: string
              id:
                type: string
              user_id:
                type: string

      additionalProperties: false

    #statuses object
    statuses:
      type: object
      $status_id:
        type: object
        properties:
          created_at:
            type: string
            constraint: createOnly()
          location: 
            $ref: "#/definitions/location"
            constraint: createOnly()
          text:
            type: string
            constraint: createOnly()
          user_id:
            type: string
            # Only Create Statuses For Logged In User and
            # cannot edit field once created
            constraint: isUser(next.val()) && createOnly()
          replies:
            type: object
            ~$status_id:
              type: boolean
          in_reply_to:
            type: string
        required: [created_at, location, text, user_id]
        additionalProperties: false

    geo_statuses:
        type: object
        $status_id:
            type: object
            properties:
                g:
                    type: string
                l:
                    type: object
                    properties:
                        0:
                            type: string
                        1:
                            type: string
                    required: ['0', '1']
                    additionalProperties: false
            required: [g, l]
            additionalProperties: false


    #notifications object
    notifications:
      type: object
      $notification_id:
        type: object
        properties:
          status:
            type: string
          type:
            type: string
          user_id:
            type: string

    #used to track which status mentions already have
    #had notifications objects created for them
    mention_notifications:
      type: object
      $mention_notification_id:
        type: boolean

    group_chats:
      type: object
      properties:
        group:
          type: object
          $group_chat_id:
            type: object
            properties:
              group_name:
                type: string
              created_at:
                type: string
              created_by:
                type: string
              last_activity:
                type: string
            required: [created_at, created_by, group_name]
            additionalProperties: false

        members:
          type: object
          $group_chat_id:
            type: object
            properties:
              ~$user_id: 
                type: boolean

        messages:
          type: object
          $group_chat_id:
            type: object
            properties:
              $message_id:
                type: object
                properties:
                  created_at:
                    type: string
                  location:
                    $ref: "#/definitions/location"
                  text:
                    type: string
                  user_id:
                    type: string
                    constraint: isUser(next.val())
                required: [created_at, location, text, user_id]
                additionalProperties: false
          
  additionalProperties: false

access:
  # Logged In Users Can Read Another Users Public Profile
  - location: /users/$user_id/public_profile/
    read:     isLoggedIn()

  # User Can Read All Data In Their User Object
  - location: /users/$user_id/
    read:     isUser($user_id)

  # User Can Write All Data In Their User Object
  - location: /users/$user_id/
    write:    isUser($user_id) || ( createOnly() && !hasUser_id() )

  # User can read friend's statuses
  - location: /users/$user_id/statuses/
    read:     isFriend($user_id)

  - location: /users/$user_id/location/
    read:     isFriend($user_id)

  # User Can Read And Write All Data In Their User Mapping Object  
  - location: /user_mappings/facebook/$facebook_auth_id/
    read:     $facebook_auth_id === auth.uid

  # User Can Write Data In User Mapping Object
  - location: /user_mappings/facebook/$facebook_auth_id/
    write:    $facebook_auth_id === auth.uid

  # User Can Read Their Notifications
  - location: /notifications/$notification_id/
    read:     isUser(prev.user_id.val())

  # User Can Read All Friends' Statuses And Their Own Statuses
  # Can not read statuses of friends that have
  # replied to someone who is not your friend
  - location: /statuses/$status_id/
    read:     ( isFriend(prev.user_id.val()) && checkReply(prev.in_reply_to.val()) )
              || isUser(prev.user_id.val())

  # Logged In Users Can Write to statuses
  - location: /statuses/
    write:    isLoggedIn()

  # Any logged in user can read usernames 
  - location: /usernames/
    read:     isLoggedIn()

  # Any logged in user can write usernames
  - location: /usernames/
    write:    isLoggedIn()

  # Only logged in users can read group_chats
  - location: /group_chats/
    read:     isLoggedIn()

  # Only logged in users can write group_chats
  - location: /group_chats/
    write:    isLoggedIn()

  # only auth'd users can write the geo statuses
  # (anyone can read)
  - location: /geo_statuses/
    write:    isLoggedIn()

  # users can only modify their own geo statuses
  - location: /geo_statuses/$status_id/
    write: postedByUser($status_id)

  # anyone logged in can read geo statuses
  - location: /geo_statuses/
    read:     isLoggedIn()

